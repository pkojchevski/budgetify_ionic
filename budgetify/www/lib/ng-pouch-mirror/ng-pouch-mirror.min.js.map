{"version":3,"names":[],"mappings":"","sources":["ng-pouch-mirror.js"],"sourcesContent":["/**\n * @license ng-pouch-mirror 0.1.0\n * (c) 2015 Colin Skow\n * License: MIT\n */\n(function(angular, PouchDB) {\n'use strict';\n/* global angular, PouchDB */\n/* jshint -W097 */\n\nangular.module('pouchMirror', [])\n\n  .run([\"$window\", \"$rootScope\", function($window, $rootScope) {\n    $rootScope.online = $window.navigator.onLine;\n    $window.addEventListener(\"offline\", function () {\n      $rootScope.online = false;\n      $rootScope.$broadcast('offline');\n    });\n    $window.addEventListener(\"online\", function () {\n      $rootScope.online = true;\n      $rootScope.$broadcast('online');\n    });\n  }])\n\n  .factory('PouchMirror', [\"$rootScope\", \"$q\", function($rootScope, $q) {\n    return function(localDbName, remoteUrl, remoteOptions) {\n      var memoryDb, diskDb, remoteDb, remoteSync;\n      var syncing = false;\n      var stopped = true;\n      var status = 'stopped';\n      var active = false, ready = false;\n      remoteOptions = remoteOptions || {};\n      if(!localDbName) {\n        localDbName = 'pouch';\n      }\n      // First copy the diskDb to memory, and then sync changes in memory to diskDb\n      memoryDb = new PouchDB(localDbName + '_mem', {adapter: 'memory'});\n      diskDb = new PouchDB(localDbName);\n      diskDb.replicate.to(memoryDb).then(function() {\n        memoryDb.replicate.to(diskDb, {live: true});\n        startSync();\n      });\n\n      $rootScope.$on('online', function() {\n        if(!stopped) {\n          startSync();\n        }\n      });\n      $rootScope.$on('offline', function() {\n        if(!stopped) {\n          status = 'offline';\n        }\n        pauseSync();\n      });\n\n      memoryDb.startSync = startSync;\n      memoryDb.stopSync = stopSync;\n      memoryDb.syncStatus = getStatus;\n      memoryDb.destroyLocal = destroyLocal;\n\n      return memoryDb;\n\n      function getStatus() {\n        return {\n          status: status,\n          active: active,\n          ready: ready\n        };\n      }\n\n      function startSync() {\n        stopped = false;\n        if(remoteUrl && $rootScope.online && !syncing) {\n          if(!remoteDb) {\n            remoteDb = new PouchDB(remoteUrl, remoteOptions);\n          }\n          remoteSync = PouchDB.sync(remoteDb, memoryDb, {live: true, retry: true})\n            .on('active', function() {\n              active = true;\n              $rootScope.$broadcast('pm:update', localDbName, 'active', getStatus());\n            })\n            .on('paused', function() {\n              active = false;\n              if(!ready) {\n                ready = true;\n                $rootScope.$broadcast('pm:update', localDbName, 'ready', getStatus());\n              }\n              $rootScope.$broadcast('pm:update', localDbName, 'paused', getStatus());\n\n            })\n            .on('complete', function(info) {\n              // This means the sync was cancelled\n              active = false;\n              syncing = false;\n              // These should show up under the 'error' handler but PouchDB is firing 'complete' instead\n              if(checkUnauthorized(info)) {\n                status = 'error';\n                $rootScope.$broadcast('pm:error', localDbName, {error: 'unauthorized'}, getStatus(), info);\n              } else {\n                status = 'stopped';\n                $rootScope.$broadcast('pm:update', localDbName, 'stopped', getStatus(), info);\n              }\n            })\n            .on('denied', function(err) {\n              // Access denied\n              $rootScope.$broadcast('pm:denied', localDbName, err, getStatus());\n            })\n            .on('error', function(err){\n              active = false;\n              status = 'error';\n              $rootScope.$broadcast('pm:error', localDbName, err, getStatus());\n            });\n          syncing = true;\n          status = 'syncing';\n        } else {\n          if (!$rootScope.online) {\n            status = 'offline';\n          }\n          if (!ready) {\n            ready = true;\n            $rootScope.$broadcast('pm:update', localDbName, 'ready', getStatus());\n          }\n        }\n      }\n\n      // Called when an offline status is detected\n      function pauseSync() {\n        if(syncing) {\n          remoteSync.cancel();\n          syncing = false;\n        }\n      }\n\n      // Manually stop the sync regardless of offline status\n      function stopSync() {\n        stopped = true;\n        status = 'stopped';\n        ready = 'false';\n        pauseSync();\n      }\n\n      // Destroys both the Disk and Memory databases\n      function destroyLocal() {\n        stopSync();\n        return $q.all([diskDb.destroy(), memoryDb.destroy()]);\n      }\n\n      function checkUnauthorized(info) {\n        var unauthorized = false;\n        if(info.push && info.push.errors) {\n          info.push.errors.forEach(function(err) {\n            if(err.name === 'unauthorized' || err.name === 'forbidden') {\n              unauthorized = true;\n            }\n          });\n        }\n        if(info.pull && info.pull.errors) {\n          info.pull.errors.forEach(function(err) {\n            if(err.name === 'unauthorized' || err.name === 'forbidden') {\n              unauthorized = true;\n            }\n          });\n        }\n        return unauthorized;\n      }\n\n    };\n  }]);\n})(angular, PouchDB);"],"file":"ng-pouch-mirror.min.js","sourceRoot":"/source/"}